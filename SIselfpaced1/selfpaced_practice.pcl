
# Number of items in the array for critical stims
int things = 19;
int sentences_in_exp = 6;


# (1) lede, (2) boundsentence, (3) she said that, (4-5) all of them | were  [or] (4-5) |they did, (6) she added, (7) that,
#	(8-12) stuff, (13) number of regions after "that", (14-16) blank, (17) compq, (18) rightanswer, (19) wronganswer
array <string> fillerblock[sentences_in_exp][things]={
{"Janice wanted to go for a bike ride on the weekend", "Her friend Catherine was going to go with her", "They decided", "to go", "on Saturday", "On Saturday", "they", "packed up", "a picnic lunch", "and set out", "", "", "3", "", "", "", "When did Janice and Catherine go biking?", "Saturday", "Sunday"},
{"Johnny and Rich were supposed to bring dessert to the party", "They decided to bring ice cream, but couldn't choose a flavor", "Rich's favorite flavor", "was", "cookies and cream", "Johnny's", "favorite flavor,", "however,", "was", "rocky road", "", "", "3", "", "", "", "What were Johnny and Rich bringing to the party?", "Dessert", "Appetizers"},
{"Peter and Sam were both dog lovers", "Peter asked Sam what his favorite breed was", "Sam said", "his favorite was", "beagles", "He added", "that", "they made", "great", "house pets", "", "", "3", "", "", "", "", "", ""},
{"Clint and Ted were in the same chemistry class", "Clint asked Ted when their final was", "Ted said that", "it was", "next Wednesday", "He added", "that", "there was", "a final paper", "due", "on Friday,", "also", "5", "", "", "", "", "", ""},
{"Jeff and Mark had to turn in their class project on Monday", "Jeff asked Mark to send him his part by Saturday night", "Mark nodded", "and said that", "he would", "He added", "that", "he would", "proofread it", "first", "", "", "3", "", "", "", "", "", ""},
{"The dinosaurs went extinct 65 million years ago", "Scientists are still not sure what caused the extinction", "Some believe", "it was caused by", "a meteor", "Others believe", "it was", "due to", "volcanic activity", "or a", "sudden drop in", "sea level", "5", "", "", "", "", "", ""}
};



#--- ORGANIZING ---#

# Initialize array for a sentence of a single trial
array <string> thissentence[things] = {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""};


#Creates and then randomizes order for filler sentences
array <int> fillerorder[sentences_in_exp] = {1};
array <string> fillers[sentences_in_exp] = {"filler"};
loop
	int sentnum = 1
until
	sentnum > sentences_in_exp
begin
	fillerorder[sentnum] = sentnum;
	sentnum = sentnum+1;
end;
fillerorder.shuffle();




	
#-----------------   SELFPACEDFILLER() SUBROUTINE   -----------------
	sub														# Function that does self-paced reading for filler sentence.
		selfpacedfiller( array <string,1>& sentence, int orderinexp)
																#  The argument is a sentence in array format (each
	begin														#  element is a "region", then three strings and an int giving
																#  info about that sentence (which will later be
	loop														#  output into the codes
		int region = 0;									# Start before the first word (so that it begins
	until														#  as all dashes)
		region > sentence.count()						# Go until the last word
	begin
		string sentencetodisplay = "";				# Initialize string as empty; later this will be
																#  built up into dashes and the actual words
		int thisregion_chars = 0;
		if region > 0 then								# Gets the length of the region (unless this is
																#  the empty 0th region
			thisregion_chars = sentence[region].count();
		end;
																# This loop makes a string out of all
																#	dashes, except for the current region,
																#	which is shown as a word
		loop											
			int origregion = 1;							# Go through each region of the sentence
		until 
			origregion > sentence.count()
		begin
			string newline = " ";							# If this is region 1, 2, or 6, there will be
			string period = "";								#  a newline; otherwise there will be a space.
			if origregion == 1 then							#  If it's 1, 2, 5, or end there will be
				newline = "\n";								#  a period
				period = ".";
			elseif origregion == 2 then
				newline = "\n";
				period = ".";
			elseif origregion == 5 then
				period = "."
			elseif origregion == 6 then
				newline = "\n";
			elseif origregion == sentence.count() then
				period = ".";
				newline = "";
			end;
				
			if origregion == region then				# If we're on the region being read, then
																#  show that region
				sentencetodisplay = sentencetodisplay + sentence[origregion] + period + newline;
			else												# Otherwise, show dashes
				int numdashes = sentence[origregion].count();
				string dashes = "";
				loop
					int i = 1;
				until
					i > numdashes
				begin
					dashes = dashes + "-";
					i = i + 1;
				end;
				sentencetodisplay = sentencetodisplay + dashes + period + newline;
			end;
			origregion = origregion + 1;
		end;
		
																# Show the sentence
		show_sentence_caption.set_caption(sentencetodisplay);
		show_sentence_picture.set_part_x(1, -450, left_coordinate);
		show_sentence_caption.redraw();
		show_sentence.present();
		
		region = region + 1;								# Go to the next region
	end;
	end;
	


#-----------------   INSTRUCTIONS   -----------------
instruction_trial.present();


#-----------------   EXPERIMENT BLOCK  -----------------

loop																	# Go through all the trials						
	int sentencenumber = 1;
until
	sentencenumber > sentences_in_exp
begin
		thissentence = fillerblock[fillerorder[sentencenumber]];		# Get the sentence for this trial
		int charsafterthat = int(thissentence[13]);	# Tells whether the vignette is shorter than 12 chunks
		string sentencetype = thissentence[15];				# Tells whether this is a critical sentence or a filler sentence

		array <string> wholesentence[1] = {""};				# Make the sentence
		wholesentence[1] = thissentence[1];
		loop
			int region=2
		until
			region > 6 + charsafterthat + 1
		begin
			wholesentence.add(thissentence[region]);
			region = region+1;
		end;
		
		selfpacedfiller(wholesentence, sentencenumber);							# Do the self-paced reading



	if thissentence[17].count() > 0 then						# If there is a comprehension question
		string compq = thissentence[17];							# Get the comprehension question
		string rightanswer = thissentence[18];					# Get the correct answer
		string wronganswer = thissentence[19];					# Get the wrong answer
		show_compq_caption.set_caption(compq);					# Set the question for the caption
		show_compq_caption.redraw();
		if random() < 0.5 then										# randomly choose to put the correct answer on the left or right
			show_left_caption.set_caption(wronganswer);		# and set up the captions accordingly
			show_left_caption.redraw();					
			show_right_caption.set_caption(rightanswer);
			show_right_caption.redraw();
			show_compq_event.set_target_button(3);
			show_compq_event.set_event_code("compq right");
		else
			show_left_caption.set_caption(rightanswer);
			show_left_caption.redraw();
			show_right_caption.set_caption(wronganswer);
			show_right_caption.redraw();
			show_compq_event.set_target_button(2);
			show_compq_event.set_event_code("compq left");
		end;
		show_compq.present();										# Show the comprehension question
	end;
	#---------- BETWEEN-BLOCK MESSAGE ----------  
																# If we're at the end of a block

		
	sentencenumber = sentencenumber + 1;			# Move on to the next trial
end;
	
block_end_trial.present();